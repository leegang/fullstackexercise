{"version":3,"sources":["service/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Notification","props","message","className","Filter","value","onChange","PersinForm","nameValue","nameChange","numberValue","numberChange","type","onClick","Persons","personToShow","map","person","name","key","number","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","showAll","setShowAll","filter","setFilter","setMessage","errormessage","setErrorMessage","useEffect","getPersons","personService","then","response","notNullPersons","data","item","p","toLowerCase","indexOf","event","console","log","target","preventDefault","b","find","newPerson","window","confirm","res","catch","error","newPersons","push","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.001a064d.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst remove = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n  }\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  remove: remove\n}","import React, { useState, useEffect } from \"react\";\nimport personService from \"./service/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [filter, setFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [errormessage, setErrorMessage] = useState(null)\n\n\n  useEffect(() => {\n    getPersons();\n  }, []);\n\n  const getPersons = () => {\n    personService.getAll().then((response) => {\n      const notNullPersons = response.data.filter((item) => item.name);\n      setPersons(notNullPersons);\n    });\n  };\n\n  const handleAdd = (event) => {\n    event.preventDefault();\n    const b = persons.find(\n      (p) => p.name.toLowerCase() === newName.toLowerCase()\n    );\n\n    if (b) {\n      const newPerson = { name: newName, number: newNumber };\n      const id = b.id;\n      if (\n        window.confirm(\n          `${newName} is already added to the phonebook,replace the old number with a new one?`\n        )\n      ) {\n        personService.update(id, newPerson).then(res =>{\n          getPersons();\n        }).catch(error=>{\n          setErrorMessage(`Note:Infomation of${newName} has already been removed from server`)\n        });\n        \n      }\n    } else if (newName !== \"\") {\n      const newPerson = { name: newName, number: newNumber };\n      console.log(\"newPerson\", newPerson);\n      const newPersons = [...persons];\n      personService.create(newPerson).then((res) => {\n        newPersons.push(res.data);\n        setPersons(newPersons);\n        setMessage(`Added ${newName}`)\n      });\n    }\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const handleChangeName = (event) => {\n    console.log(event.target.value);\n    setNewName(event.target.value);\n    setFilter(\"\");\n  };\n\n  const handleChangeFilter = (event) => {\n    console.log(event.target.value);\n    setFilter(event.target.value);\n    setShowAll(false);\n  };\n\n  const handleChangeNumber = (event) => {\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n    setFilter(\"\");\n  };\n\n  const handleDelete = (name, id) => {\n    // e.preventDefault();\n    return () => {\n      if (window.confirm(`Delete ${name}?`)) {\n        personService.remove(id).then((res) => {\n          console.log(\"res.data\", res.data);\n          getPersons();\n        });\n      }\n    };\n  };\n\n  let personToShow = showAll\n    ? persons\n    : persons.filter(\n        (p) => p.name.toLowerCase().indexOf(filter.toLowerCase()) !== -1\n      );\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} className=\"successmessgae\" />\n      <Notification message={errormessage} className=\"errormessgae\" />\n\n      <Filter value={filter} onChange={handleChangeFilter} />\n\n      <h2>Add a new</h2>\n\n      <PersinForm\n        nameValue={newName}\n        nameChange={handleChangeName}\n        numberValue={newNumber}\n        numberChange={handleChangeNumber}\n        onClick={handleAdd}\n      />\n      <h2>Numbers</h2>\n      <Persons personToShow={personToShow}  onClick={handleDelete} />\n    </div>\n  );\n};\n\nconst Notification = (props) => {\n  if (props.message === null) {\n    return null\n  }\n\n  return (\n    <div  className={props.className}>\n      {props.message}\n    </div>\n  )\n}\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with: <input value={props.value} onChange={props.onChange} />\n    </div>\n  );\n};\n\nconst PersinForm = (props) => {\n  return (\n    <>\n      <form>\n        <div>\n          name: <input value={props.nameValue} onChange={props.nameChange} />\n        </div>\n        <div>\n          number:{\" \"}\n          <input value={props.numberValue} onChange={props.numberChange} />\n        </div>\n        <div>\n          <button type=\"submit\" onClick={props.onClick}>\n            add\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nconst Persons = (props) => {\n  return (\n    <>\n      {props.personToShow.map((person) =>\n        person.name ? (\n          <p key={person.id}>\n            {person.name} {person.number}{\" \"}\n            <button onClick={props.onClick(person.name, person.id)}>\n              delete\n            </button>\n          </p>\n        ) : null\n      )}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}